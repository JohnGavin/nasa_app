[{"name":"app.R","content":"library(shiny)\nlibrary(httr)\nlibrary(jsonlite)\n\n# Define UI\nui <- fluidPage(\n  tags$head(\n    tags$style(\"\n      .title { margin-bottom: 20px; }\n      .explanation { margin: 20px 0; }\n      img { max-width: 100%; height: auto; }\n      .error { color: red; }\n      #loading { display: none; }\n      #loading.active { display: block; }\n    \")\n  ),\n  titlePanel(div(class = \"title\", \"NASA Astronomy Picture of the Day\")),\n  sidebarLayout(\n    sidebarPanel(\n      dateInput(\"date\", \"Select Date:\",\n        value = Sys.Date(),\n        max = Sys.Date()\n      ),\n      div(id = \"loading\", \"Loading...\")\n    ),\n    mainPanel(\n      div(\n        class = \"content\",\n        h3(textOutput(\"title\")),\n        div(\n          class = \"explanation\",\n          textOutput(\"explanation\")\n        ),\n        uiOutput(\"mediaOutput\")\n      )\n    )\n  )\n)\n\n# Define server logic\nserver <- function(input, output, session) {\n  # Reactive expression for API data\n  nasa_data <- reactive({\n    req(input$date)\n\n    # Show loading state\n    shinyjs::runjs(\"document.getElementById('loading').classList.add('active')\")\n\n    # Format date and create API URL\n    date_str <- format(input$date, \"%Y-%m-%d\")\n    api_key <- \"DEMO_KEY\" # Replace with your NASA API key\n    url <- sprintf(\n      \"https://api.nasa.gov/planetary/apod?date=%s&api_key=%s\",\n      date_str, api_key\n    )\n\n    # Make API request with error handling\n    result <- tryCatch(\n      {\n        response <- GET(url)\n        if (status_code(response) == 200) {\n          fromJSON(rawToChar(response$content))\n        } else {\n          list(\n            title = \"Error\",\n            explanation = sprintf(\"API Error: Status code %d\", status_code(response)),\n            media_type = \"error\"\n          )\n        }\n      },\n      error = function(e) {\n        list(\n          title = \"Error\",\n          explanation = sprintf(\"Failed to fetch data: %s\", e$message),\n          media_type = \"error\"\n        )\n      }\n    )\n\n    # Hide loading state\n    shinyjs::runjs(\"document.getElementById('loading').classList.remove('active')\")\n\n    result\n  })\n\n  # Render title\n  output$title <- renderText({\n    nasa_data()$title\n  })\n\n  # Render explanation\n  output$explanation <- renderText({\n    nasa_data()$explanation\n  })\n\n  # Render media (image or video)\n  output$mediaOutput <- renderUI({\n    data <- nasa_data()\n\n    if (!is.null(data$media_type)) {\n      if (data$media_type == \"image\") {\n        tags$img(\n          src = data$url,\n          alt = data$title\n        )\n      } else if (data$media_type == \"video\") {\n        tags$iframe(\n          src = data$url,\n          width = \"100%\",\n          height = \"500px\",\n          frameborder = \"0\",\n          allowfullscreen = TRUE\n        )\n      } else {\n        tags$p(\n          class = \"error\",\n          \"Media not available\"\n        )\n      }\n    } else {\n      tags$p(\n        class = \"error\",\n        \"No media type specified\"\n      )\n    }\n  })\n}\n\n# Create Shiny app\nshinyApp(ui = ui, server = server)\n","type":"text"},{"name":"requirements.txt","content":"shiny\nhttr\njsonlite\n","type":"text"}]
